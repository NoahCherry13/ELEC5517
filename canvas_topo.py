# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x2oHb1Ymaks6nF35n7SefEHjEKPBXd1q
"""

#!/usr/bin/env python3
"""
canvas_spine_leaf.py
Mininet topology for ELEC5517 Project 2 (ONOS controller).

Design:
- Spine-Leaf fabric (Clos-style), defaults: 2 spines, 3 leaves, 4 hosts/leaf.
- VLAN isolation for Canvas services:
    Video (Lectures): VLAN 100
    ScreenShare:      VLAN 200
    Chat:             VLAN 300
    Exams (cams):     VLAN 400
- Uses Open vSwitch (OpenFlow 1.3) and TCLink for realistic link params.
- Works with ONOS via --controller=remote,ip=<ONOS_IP>,port=6653

Usage:
sudo mn --custom canvas_spine_leaf.py --topo canvas,spines=2,leaves=3,hosts_per_leaf=4 \
        --link tc --controller=remote,ip=127.0.0.1,port=6653 \
        --switch ovsk,protocols=OpenFlow13
"""

from mininet.topo import Topo
from mininet.net import Mininet
from mininet.node import OVSKernelSwitch, RemoteController, Host
from mininet.link import TCLink
from mininet.cli import CLI
from mininet.log import setLogLevel, info

# ----------------------------
# VLAN-capable Host
# ----------------------------
class VLANHost(Host):
    """
    Host connected to an OVS access port carrying a single VLAN tag.
    Sets the Port 'tag' on the switch and assigns IP to the subinterface.
    """
    def config(self, vlan=100, **params):
        r = super(VLANHost, self).config(**params)
        intf = self.defaultIntf()
        base = str(intf)
        # Create VLAN subinterface (host side) and move IP onto it
        self.cmd('ip -d link add link {} name {}.{} type vlan id {}'.format(base, base, vlan, vlan))
        # Move any assigned IP to VLAN subif (Mininet usually sets none; we set below)
        self.cmd('ip addr flush dev {}'.format(base))
        # Bring up interfaces
        self.cmd('ip link set dev {} up'.format(base))
        self.cmd('ip link set dev {}.{} up'.format(base, vlan))

        # Tell OVS to treat the access port as VLAN=tag
        # (OVS side is set automatically by Mininet when we use "tag" on the switch port;
        #  we set it explicitly in topology wiring below.)
        self.vlan = vlan
        return r

    def setIP(self, ip, prefixLen=24, intf=None, **kwargs):
        "Assign IP to VLAN subinterface instead of base intf"
        if not intf:
            intf = self.defaultIntf()
        vlan = getattr(self, 'vlan', 100)
        return super(VLANHost, self).setIP(ip, prefixLen, intf='{}.{}'.format(intf, vlan), **kwargs)

# ----------------------------
# Topology
# ----------------------------
class CanvasSpineLeaf(Topo):
    """
    Spine-Leaf fabric with VLAN-isolated traffic classes for Canvas:
    - VLAN 100: Video (lectures)
    - VLAN 200: ScreenShare
    - VLAN 300: Chat
    - VLAN 400: Exams
    Hosts per leaf are assigned round-robin to these VLANs.
    """
    def build(self,
              spines=2,
              leaves=3,
              hosts_per_leaf=4,
              core_bw=10, core_delay='1ms',
              leaf_bw=5, leaf_delay='2ms',
              host_bw=1, host_delay='5ms'):

        # Create spine switches
        spinesw = []
        for i in range(1, spines + 1):
            s = self.addSwitch(f's{i}', cls=OVSKernelSwitch, protocols='OpenFlow13')
            spinesw.append(s)

        # Create leaf switches
        leafsw = []
        for j in range(1, leaves + 1):
            l = self.addSwitch(f'l{j}', cls=OVSKernelSwitch, protocols='OpenFlow13')
            leafsw.append(l)

        # Full mesh spines <-> leaves
        for s in spinesw:
            for l in leafsw:
                self.addLink(s, l, cls=TCLink, bw=core_bw, delay=core_delay)

        # VLAN mapping for service classes
        VLAN_CLASSES = [100, 200, 300, 400]  # Video, Screen, Chat, Exams
        # Simple service IP subnets by VLAN (distinct /24s)
        VLAN_SUBNET = {
            100: '10.100.{leaf}.',   # Video
            200: '10.200.{leaf}.',   # ScreenShare
            300: '10.300.{leaf}.',   # Chat
            400: '10.400.{leaf}.',   # Exams
        }

        # Attach hosts to each leaf
        for li, leaf in enumerate(leafsw, start=1):
            for hi in range(1, hosts_per_leaf + 1):
                vlan = VLAN_CLASSES[(hi - 1) % len(VLAN_CLASSES)]
                hname = f'h{li}_{hi}_v{vlan}'
                # Use VLANHost so the IP goes on <if>.vlan
                host = self.addHost(
                    hname,
                    cls=VLANHost,
                    vlan=vlan  # stored in object; IP assigned post-start
                )
                # Connect host -> leaf with realistic link
                self.addLink(
                    host, leaf, cls=TCLink,
                    bw=host_bw, delay=host_delay
                )

                # Store metadata on node for later IP assignment in postStart helper
                ipBase = VLAN_SUBNET[vlan].format(leaf=li)
                host_ip = f'{ipBase}{hi}/24'
                # Mininet's Topo doesn't assign IP here; we'll do it after net.start().

        # Optionally: add service/edge nodes (e.g., media/chat servers) on a dedicated leaf
        # Uncomment below to add a "services" leaf with 1 server per VLAN.
        # svc = self.addSwitch('lsvc', cls=OVSKernelSwitch, protocols='OpenFlow13')
        # for s in spinesw: self.addLink(s, svc, cls=TCLink, bw=core_bw, delay=core_delay)
        # for idx, vlan in enumerate(VLAN_CLASSES, start=1):
        #     svcHost = self.addHost(f'svc_v{vlan}', cls=VLANHost, vlan=vlan)
        #     self.addLink(svcHost, svc, cls=TCLink, bw=host_bw, delay=host_delay)

# ----------------------------
# Helpers
# ----------------------------
def assignIPs(net):
    """
    Assign deterministic IPs per VLAN and leaf. Also sets OVS access port 'tag'
    to ensure proper VLAN handling on switch side.
    """
    info('\n*** Assigning IPs per VLAN class\n')
    # Build a quick index of leaf switch ports to know which port a host uses
    # We'll set 'tag' on the leaf's host-facing port.
    for h in net.hosts:
        if not isinstance(h, VLANHost):
            continue
        vlan = h.vlan
        # Derive leaf index from attached switch name, e.g., l2
        leaf = None
        for intf in h.intfList():
            if intf.link:
                # Find the peer node (switch)
                node1, node2 = intf.link.intf1.node, intf.link.intf2.node
                peer = node1 if node2 == h else node2
                if peer.name.startswith('l'):
                    leaf = peer
                    host_intf = intf
                    break
        if not leaf:
            info(f'  ! Could not find leaf for {h.name}\n')
            continue

        # Host numbering within leaf for IP last octet
        # Weâ€™ll extract a small index from host name pattern h<li>_<hi>_v<vlan>
        try:
            parts = h.name.split('_')
            li = int(parts[0][1:])     # after 'h', take leaf index until '_'
            hi = int(parts[1])         # host index on this leaf
        except Exception:
            li, hi = 1, 1

        # Subnet by VLAN: 10.<vlan>.<leaf>.<host>
        net_octet = vlan  # 100/200/300/400
        ip = f'10.{net_octet}.{li}.{hi}/24'
        h.setIP(ip)

        # Set default route (optional; adjust gateway if you add routers)
        h.cmd('ip route add default dev {}'.format(h.defaultIntf()))

        # Set OVS access port tag on the leaf side for this host link
        # The host-side interface name is host_intf; peer side is leaf's port
        if host_intf and host_intf.link:
            li1, li2 = host_intf.link.intf1, host_intf.link.intf2
            peer_intf = li1 if li2.node == h else li2
            leaf_port = str(peer_intf)  # e.g., l2-eth3
            # Apply VLAN tag on the switch port
            leaf.cmd('ovs-vsctl set Port {} tag={}'.format(leaf_port, vlan))

        info(f'  {h.name:12s} VLAN {vlan:<3d} -> IP {ip}\n')

def forceOpenFlow13(net):
    info('\n*** Forcing OpenFlow13 on all OVS bridges\n')
    for s in net.switches:
        s.cmd('ovs-vsctl set bridge {} protocols=OpenFlow13'.format(s.name))

def main():
    setLogLevel('info')
    topo = CanvasSpineLeaf()
    net = Mininet(topo=topo,
                  controller=None,  # Use CLI args e.g., --controller=remote
                  link=TCLink,
                  switch=OVSKernelSwitch,
                  build=True, autoSetMacs=True, autoStaticArp=True)
    # NOTE: Controller is provided via mn CLI: --controller=remote,ip=...,port=6653
    net.start()
    forceOpenFlow13(net)
    assignIPs(net)

    info('\n*** Topology ready. Useful checks:\n')
    info('    - pingall\n')
    info('    - on ONOS GUI (http://<ONOS_IP>:8181/onos/ui): Topology, Flows, Intents\n')
    info('    - onos> devices, ports, hosts, flows\n')
    info('    - Use VLANs for isolation: 100 Video, 200 Screen, 300 Chat, 400 Exams\n\n')

    CLI(net)
    net.stop()

if __name__ == '__main__':
    main()